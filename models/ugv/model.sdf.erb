<?xml version='1.0'?>


<%
density = 373

chassis_width = 0.24
chassis_length = 0.2
chassis_height = 0.04

camera_width = 0.1
camera_length = 0.03
camera_height = 0.03

camera_offset_z = chassis_height/2 + camera_height/2 + 0.08
camera_offset_x = chassis_length/2 - camera_length

camera_pitch = Math::PI/6
camera_eye_offset = camera_width/2

camera_on = "false"
camera_path_prefix = "/tmp/stereo_camera_"

wheel_radius = 0.05
wheel_offset_z = -0.025

wheel_leg_count = 5
wheel_leg_radius = 0.005
wheel_leg_extension = wheel_radius * 0.75

def box_inertia(x, y, z, density)
  box = {}
  box[:size] = "#{x} #{y} #{z}"
  box[:mass] = density * x * y * z
  box[:ixx] = box[:mass]/12.0 * (y**2 + z**2)
  box[:iyy] = box[:mass]/12.0 * (z**2 + x**2)
  box[:izz] = box[:mass]/12.0 * (x**2 + y**2)
  box
end

def sphere_inertia(r, density)
  sphere = {}
  sphere[:radius] = "#{r}"
  sphere[:mass] = density * 4.0/3.0 * Math::PI * r * r * r
  sphere[:ixx] = (2.0/5.0) * sphere[:mass] * r * r
  sphere[:iyy] = (2.0/5.0) * sphere[:mass] * r * r
  sphere[:izz] = (2.0/5.0) * sphere[:mass] * r * r
  sphere
end

# All simulated entities (links and joints)
chassis = {}
wheels = {}
revolute_joints = {}

# Chassis
chassis_name = "chassis"
chassis = box_inertia(chassis_length, chassis_width, chassis_height, density)

# Camera
camera = {
  pose: "#{camera_offset_x} 0 #{camera_offset_z} 0 #{camera_pitch} 0",
  size: "#{camera_length} #{camera_width} #{camera_height}",
  poll_pose: "#{camera_offset_x} 0 #{camera_offset_z/2} 0 -0 0",
  poll_size: "#{camera_length/1.4} #{camera_length/1.4} #{camera_offset_z}"
}

# Wheels, wheel legs, and all wheel-related joints
wheel_names = ["front-right", "front-left", "back-right", "back-left"]

wheel_names.each do |name|

  # Link
  wheel_name = name + "-wheel"

  # TODO: Use cylinder inertia instead of sphere?
  wheels[wheel_name] = sphere_inertia(wheel_radius, density)
  fb = name.include?("front") ? 1 : - 1
  lr = name.include?("left") ? 1 : -1

  wheel_x = fb*chassis_length/2
  wheel_y = lr*chassis_width/2

  wheels[wheel_name][:pose] = "#{wheel_x} #{wheel_y} #{wheel_offset_z} 0 -0 0"

  # Joint (for controlling ugv motion)
  joint_name = wheel_name + "-joint"
  revolute_joints[joint_name] = { parent: chassis_name, child: wheel_name }

  # Wheel legs (extra collisions/visuals for each wheel--not links/joints)
  wheels[wheel_name][:legs] = []
  (1..wheel_leg_count).each do |leg|

    angle = leg.to_f/wheel_leg_count*2*Math::PI
    leg_x = (wheel_radius + wheel_leg_extension)*Math::cos(angle)
    leg_y = 0
    leg_z = (wheel_radius + wheel_leg_extension)*Math::sin(angle)

    wheels[wheel_name][:legs].push({
      name: wheel_name + "-leg#{leg}",
      pose: "#{leg_x} #{leg_y} #{leg_z} 0 -0 0",
      radius: wheel_leg_radius
    })
  end
end

%>


<sdf version='1.6'>
  <model name='ugv'>

    <plugin name="controller" filename="libcontroller_plugin.so"/>

    <link name='<%= chassis_name %>'>

      <pose frame=''>0 0 0 0 -0 0</pose>

      <inertial>
        <mass><%= chassis[:mass] %></mass>
        <inertia>
          <ixx><%= chassis[:ixx] %></ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy><%= chassis[:iyy] %></iyy>
          <iyz>0</iyz>
          <izz><%= chassis[:izz] %></izz>
        </inertia>
      </inertial>

      <visual name='visual'>
        <geometry>
          <box>
            <size><%= chassis[:size] %></size>
          </box>
        </geometry>
        <material>
          <ambient>0.3 0.3 0.3 1</ambient>
          <diffuse>0.7 0.7 0.7 1</diffuse>
          <specular>0.01 0.01 0.01 1</specular>
          <emissive>0 0 0 1</emissive>
        </material>
        <transparency>0</transparency>
      </visual>

      <collision name='collision'>
        <geometry>
          <box>
            <size><%= chassis[:size] %></size>
          </box>
        </geometry>
      </collision>

      <sensor name='stereo_camera' type='multicamera'>

        <pose><%= camera[:pose] %></pose>

        <always_on>1</always_on>
        <update_rate>10</update_rate>

        <camera name="left">
          <save enabled="<%= camera_on %>">
            <path><%= camera_path_prefix%>left</path>
          </save>
          <horizontal_fov>1.047</horizontal_fov>
          <pose>0 <%= camera_eye_offset %> 0 0 0 0</pose>
          <image>
            <width>400</width>
            <height>400</height>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <!-- <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise> -->
        </camera>

        <camera name="right">
          <save enabled="<%= camera_on %>">
            <path><%= camera_path_prefix%>right</path>
          </save>
          <horizontal_fov>1.047</horizontal_fov>
          <pose>0 -<%= camera_eye_offset %> 0 0 0 0</pose>
          <image>
            <width>400</width>
            <height>400</height>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <!-- <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise> -->
        </camera>

      </sensor>

      <visual name='camera-visual'>
        <pose><%= camera[:pose] %></pose>
        <geometry>
          <box>
            <size><%= camera[:size] %></size>
          </box>
        </geometry>
        <material>
          <ambient>0.3 0.6 0.3 1</ambient>
          <diffuse>0.7 0.7 0.7 1</diffuse>
          <specular>0.01 0.01 0.01 1</specular>
          <emissive>0 0 0 1</emissive>
        </material>
        <transparency>0</transparency>
      </visual>

      <visual name='camera-pole-visual'>
        <pose><%= camera[:poll_pose] %></pose>
        <geometry>
          <box>
            <size><%= camera[:poll_size] %></size>
          </box>
        </geometry>
        <material>
          <ambient>0.3 0.3 0.3 1</ambient>
          <diffuse>0.7 0.7 0.7 1</diffuse>
          <specular>0.01 0.01 0.01 1</specular>
          <emissive>0 0 0 1</emissive>
        </material>
        <transparency>0</transparency>
      </visual>

    </link>


<%
wheels.keys.each do |k|
  wheel = wheels[k]
%>


    <link name='<%= k %>'>

      <pose frame=''><%= wheel[:pose] %></pose>

      <inertial>
        <mass><%= wheel[:mass] %></mass>
        <inertia>
          <ixx><%= wheel[:ixx] %></ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy><%= wheel[:iyy] %></iyy>
          <iyz>0</iyz>
          <izz><%= wheel[:izz] %></izz>
        </inertia>
      </inertial>

      <visual name='visual'>
        <geometry>
          <sphere>
            <radius><%= wheel[:radius] %></radius>
          </sphere>
        </geometry>
        <material>
          <ambient>0.3 0.3 0.6 1</ambient>
          <diffuse>0.7 0.7 0.7 1</diffuse>
          <specular>0.01 0.01 0.01 1</specular>
          <emissive>0 0 0 1</emissive>
        </material>
        <transparency>0</transparency>
      </visual>

      <collision name='collision'>
        <geometry>
          <sphere>
            <radius><%= wheel[:radius] %></radius>
          </sphere>
        </geometry>
      </collision>

<%
  wheel[:legs].each do |leg|
%>
      <visual name='<%= leg[:name] %>-visual'>
        <pose><%= leg[:pose] %></pose>
        <geometry>
          <sphere>
            <radius><%= leg[:radius] %></radius>
          </sphere>
        </geometry>
        <material>
          <ambient>0.6 0.3 0.3 1</ambient>
          <diffuse>0.7 0.7 0.7 1</diffuse>
          <specular>0.01 0.01 0.01 1</specular>
          <emissive>0 0 0 1</emissive>
        </material>
        <transparency>0</transparency>
      </visual>

      <collision name='<%= leg[:name] %>-collision'>
        <pose><%= leg[:pose] %></pose>
        <geometry>
          <sphere>
            <radius><%= leg[:radius] %></radius>
          </sphere>
        </geometry>
      </collision>
<%
  end
%>

    </link>


<%
# End the sphere iteration
end

revolute_joints.keys.each do |k|
  joint = revolute_joints[k]
%>


    <joint name='<%= k %>' type='revolute'>
      <parent><%= joint[:parent] %></parent>
      <child><%= joint[:child] %></child>
      <pose frame=''>0 0 0 0 -0 0</pose>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>


<%
# End the revolute_joints iteration
end
%>

  </model>
</sdf>
