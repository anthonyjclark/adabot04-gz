<?xml version='1.0'?>


<%
density = 373

chassis_width = 0.24
chassis_length = 0.2
chassis_height = 0.04

camera_size = 0.05
camera_pitch = Math::PI/6
camera_offset = chassis_height/2 + camera_size/2 + 0.08

wheel_radius = 0.05

wheel_leg_count = 5
wheel_leg_radius = 0.005
wheel_leg_extension = wheel_radius * 0.5

def box_inertia(x, y, z, density)
  box = {}
  box[:size] = "#{x} #{y} #{z}"
  box[:mass] = density * x * y * z
  box[:ixx] = box[:mass]/12.0 * (y**2 + z**2)
  box[:iyy] = box[:mass]/12.0 * (z**2 + x**2)
  box[:izz] = box[:mass]/12.0 * (x**2 + y**2)
  box
end

def sphere_inertia(r, density)
  sphere = {}
  sphere[:radius] = "#{r}"
  sphere[:mass] = density * 4.0/3.0 * Math::PI * r * r * r
  sphere[:ixx] = (2.0/5.0) * sphere[:mass] * r * r
  sphere[:iyy] = (2.0/5.0) * sphere[:mass] * r * r
  sphere[:izz] = (2.0/5.0) * sphere[:mass] * r * r
  sphere
end

# All simulated entities (links and joints)
boxes = {}
spheres = {}
revolute_joints = {}
fixed_joints = {}

# Chassis
boxes["chassis"] = box_inertia(chassis_length, chassis_width, chassis_height, density)
boxes["chassis"][:pose] = "0 0 0 0 -0 0"

# Camera
boxes["camera"] = box_inertia(camera_size, camera_size, camera_size, density)
boxes["camera"][:pose] = "0 0 #{camera_offset} 0 #{camera_pitch} 0"
fixed_joints["camera-joint"] = { parent: "chassis", child: "camera" }

# Wheels, wheel legs, and all wheel-related joints
wheel_names = ["front-right", "front-left", "back-right", "back-left"]

wheel_names.each do |name|

  # Link
  wheel_name = name + "-wheel"

  # Use cylinder inertia instead of sphere?
  spheres[wheel_name] = sphere_inertia(wheel_radius, density)
  fb = name.include?("front") ? 1 : - 1
  lr = name.include?("left") ? 1 : -1

  wheel_x = fb*chassis_length/2
  wheel_y = lr*chassis_width/2

  spheres[wheel_name][:pose] = "#{wheel_x} #{wheel_y} 0 0 -0 0"

  # Joint
  joint_name = wheel_name + "-joint"
  revolute_joints[joint_name] = { parent: "chassis", child: wheel_name }

  # Wheel legs
  (1..wheel_leg_count).each do |leg|

    # Link
    leg_name = wheel_name + "-leg#{leg}"
    spheres[leg_name] = sphere_inertia(wheel_leg_radius, density)

    angle = leg.to_f/wheel_leg_count*2*Math::PI
    leg_x = wheel_x + (wheel_radius + wheel_leg_extension)*Math::cos(angle)
    leg_y = wheel_y
    leg_z = (wheel_radius + wheel_leg_extension)*Math::sin(angle)

    spheres[leg_name][:pose] = "#{leg_x} #{leg_y} #{leg_z} 0 -0 0"

    # Joint (fixed)
    leg_joint_name = leg_name + "-joint"
    fixed_joints[leg_joint_name] = { parent: wheel_name, child: leg_name }
  end
end

%>


<sdf version='1.6'>
  <model name='ugv-rb'>

    <plugin name="controller" filename="libcontroller_plugin.so"/>


<%
boxes.keys.each do |k|
  box = boxes[k]
%>


    <link name='<%= k %>'>

      <pose frame=''><%= box[:pose] %></pose>

      <inertial>
        <mass><%= box[:mass] %></mass>
        <inertia>
          <ixx><%= box[:ixx] %></ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy><%= box[:iyy] %></iyy>
          <iyz>0</iyz>
          <izz><%= box[:izz] %></izz>
        </inertia>
      </inertial>

      <visual name='visual'>
        <geometry>
          <box>
            <size><%= box[:size] %></size>
          </box>
        </geometry>
        <material>
          <ambient>0.3 0.3 0.3 1</ambient>
          <diffuse>0.7 0.7 0.7 1</diffuse>
          <specular>0.01 0.01 0.01 1</specular>
          <emissive>0 0 0 1</emissive>
        </material>
        <transparency>0</transparency>
      </visual>

      <collision name='collision'>
        <geometry>
          <box>
            <size><%= box[:size] %></size>
          </box>
        </geometry>
      </collision>

<% if k == "camera" %>
      <sensor name='stereo_camera' type='multicamera'>

        <always_on>1</always_on>
        <update_rate>10</update_rate>

        <camera name="left">
          <save enabled="false">
            <path>/tmp/stereo_camera_left</path>
          </save>
          <horizontal_fov>1.047</horizontal_fov>
          <pose>0 0.05 0 0 0 0</pose>
          <image>
            <width>400</width>
            <height>400</height>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <!-- <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise> -->
        </camera>

        <camera name="right">
          <save enabled="false">
            <path>/tmp/stereo_camera_right</path>
          </save>
          <horizontal_fov>1.047</horizontal_fov>
          <pose>0 -0.05 0 0 0 0</pose>
          <image>
            <width>400</width>
            <height>400</height>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <!-- <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise> -->
        </camera>

      </sensor>
<% end %>

    </link>


<%
# End the box iteration
end

spheres.keys.each do |k|
  sphere = spheres[k]
%>


    <link name='<%= k %>'>

      <pose frame=''><%= sphere[:pose] %></pose>

      <inertial>
        <mass><%= sphere[:mass] %></mass>
        <inertia>
          <ixx><%= sphere[:ixx] %></ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy><%= sphere[:iyy] %></iyy>
          <iyz>0</iyz>
          <izz><%= sphere[:izz] %></izz>
        </inertia>
      </inertial>

      <visual name='visual'>
        <geometry>
          <sphere>
            <radius><%= sphere[:radius] %></radius>
          </sphere>
        </geometry>
        <material>
          <ambient>0.3 0.3 0.6 1</ambient>
          <diffuse>0.7 0.7 0.7 1</diffuse>
          <specular>0.01 0.01 0.01 1</specular>
          <emissive>0 0 0 1</emissive>
        </material>
        <transparency>0</transparency>
      </visual>

      <collision name='collision'>
        <geometry>
          <sphere>
            <radius><%= sphere[:radius] %></radius>
          </sphere>
        </geometry>
      </collision>

    </link>


<%
# End the sphere iteration
end

revolute_joints.keys.each do |k|
  joint = revolute_joints[k]
%>


    <joint name='<%= k %>' type='revolute'>
      <parent><%= joint[:parent] %></parent>
      <child><%= joint[:child] %></child>
      <pose frame=''>0 0 0 0 -0 0</pose>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>


<%
# End the revolute_joints iteration
end

fixed_joints.keys.each do |k|
  joint = fixed_joints[k]
%>


    <joint name='<%= k %>' type='fixed'>
      <parent><%= joint[:parent] %></parent>
      <child><%= joint[:child] %></child>
    </joint>


<%
# End the fixed_joints iteration
end
%>

  </model>
</sdf>
